#!/usr/bin/env perl

##############################################################################################
### fixCoord.pl                                                                            ###
##############################################################################################
### Script to process text files generated by SMART. Sometimes coordinates were not        ###
### correctly introduced when doing the recording. This script corrects this type of files ###
### example fixCoord.pl                                                                    ###
##############################################################################################
###OPTIONS                                                                                 ###
###                                                                                        ###
##############################################################################################

use strict;
use FileHandle;
use Data::Dumper;

my $file = shift (@ARGV);

my $F=new FileHandle;
open ($F, $file);        

my @fileLines; 

my $coordReached = 0;
my $session = "";
my $wrongHeight = "";

while (<$F>)
	{   
#	Image Size (W/H)
		if ($_ =~ /^(Image Size \(W\/H\))(\s+)\:(\s+)(\d*\.?\d*)(\s+)(\d*\.?\d*)/)
#		if ($_ =~ m/(\d*\.?\d*)$/g)
			{
				print "$_";
				chomp;				
				$wrongHeight = $6;
#				print "$wrongHeight\n";
				
			}
		#Skip all the remaining lines above coordinates
		elsif ($_ =~ /^( )+\d/)
			{
				chomp;
				my $aryLine = [ split('\t', $_) ];
#				print STDERR "$wrongHeight\n";
#				print "$aryLine->[3]\t";
				$aryLine->[3] = $aryLine->[3] * 175 / $wrongHeight; 
				
				foreach my $i  (@$aryLine)
      				{
      					print "$i\t"
      				}
      			print "\n";	
			}
			
		else 
			{
				print $_;
			}
									
	}